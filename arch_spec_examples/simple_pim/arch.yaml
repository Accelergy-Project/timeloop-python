architecture:
  version: 0.4
  nodes: # Top-level is hierarchical
  - !Container # Top-level system
    name: system_arch
    attributes:
      technology: "32nm"
      latency: "1ns"

  - !Component # DRAM main memory
    name: DRAM
    class: DRAM                # assume DRAM is large enough to store all the data, so no depth specification needed
    attributes:
      width: 64                # width in bits
      datawidth: 16            # datawidth in bits
      block_size: 4
    constraints:
      dataspace: {keep: [Inputs, Outputs], bypass: [Weights]}
      temporal: {factors: R=1 S=1 M=1 C=1, permutation: [R, S, C, P, Q, M, N]}

  - !Component # Global buffer for inputs & outputs
    name: shared_glb
    class: smartbuffer_SRAM
    attributes:
      memory_depth: 16384
      memory_width: 64
      n_banks: 32
      block_size: 4
      datawidth: 16
      read_bandwidth: 16
      write_bandwidth: 16
      n_rdwr_ports: 2
      network_read: "D2A_NoC"
      network_update: "A2D_NoC"
    constraints:
      dataspace: {keep: [Inputs, Outputs], bypass: [Weights]}
      temporal: {factors: [R=1, S=1, M=1, C=1]}

  - !Component # Dummy buffer used to connect NoCs
    name: dummy_buffer
    class: dummy_storage
    attributes:
      depth: 0   # will result in zero area/energy for accelergy
      width: 16  # timeloop needs a width even if the memory is not storing anything
      network_fill: "D2A_NoC"
      network_drain: "A2D_NoC"
      datawidth: 16
    constraints:
      dataspace: {bypass: [Inputs, Outputs, Weights]}
      temporal: {factors: [R=1, S=1, M=1, C=1]}

  - !Component # D2A NoC converts digital data to analog values
    name: D2A_NoC
    class: SimpleMulticast         # timeloop class
    subclass: DAC_SimpleMulticast  # accelergy class
    attributes:
      datawidth: 16
      DAC_datawidth: 1  # DAC only converts one bit per cycle
      n_DAC_cycles: 16  # number of cycles needed for a DAC to convert a datawidth-bit data
      n_PE_cols: 16
      n_PE_rows: 16
      action_name: "transfer"
      per_datatype_ERT: True
      multicast_factor_argument: "num_destinations"

  - !Component # A2D NoC converts analog values to digital data
    name: A2D_NoC
    class: SimpleMulticast         # timeloop class
    subclass: ADC_SimpleMulticast  # accelergy class
    attributes:
      datawidth: 16
      ADC_datawidth: 8
      cell_datawidth: 2
      n_DAC_cycles: 16    # number of cycles needed for a DAC to convert a datawidth-bit data = datawidth/DAC_datawidth
      n_PE_cols: 128
      n_PE_rows: 128
      action_name: "transfer"
      per_datatype_ERT: True
      multicast_factor_argument: "num_destinations"

  - !Container # Each PE is a different memory cell
    name: PE
    spatial: {meshX: 128, meshY: 128}
    constraints:
      spatial: {factors: Q=1 P=1, permutation: [R, S, C, M], split: 3}

  - !Component # Memory cell storage for weights
    name: scratchpad
    class: memcell_storage
    attributes:
      width: 16
      depth: 1
      datawidth: 16
    constraints:
      dataspace: {keep: [Weights], bypass: [Inputs, Outputs]}
      temporal: {factors: [R=1, S=1, M=1, C=1]}

  - !Component # Memory cell compute for MACs
    name: mac
    class: memcell_compute
    attributes:
      datawidth: 16   # datawidth in bits
