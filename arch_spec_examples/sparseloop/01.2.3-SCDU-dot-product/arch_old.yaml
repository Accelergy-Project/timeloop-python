architecture:
  version: 0.4

  subtree:
    - name: PE
      required_actions: [read, write, update, leak]
      attributes:
        technology: -1

      local:
        - name: Buffer
          class: storage
          subclass: regfile_metadata    # compound component with separate data and metadata storages
                                        # definition found in ../components/refile_metadata.yaml
          required_actions: [read, write, update, leak]
          attributes:
            technology: -1
            data_storage_depth: 64      # depth of the data storage only
            data_storage_width: 8       # width of the data storage only
            datawidth: 8                # actual data's datawidth
            block_size: 1
            metadata_storage_depth: 32  # depth of the metadata storage only
            metadata_storage_width: 4   # width of the metadata storage only
            metadata_datawidth: 4       # metadata's datawidth (can be different from datawidth)
            read_bandwidth: 4
            write_bandwidth: 3

        - name: MAC
          class: compute
          subclass: intmac
          required_actions: [read, write, update, leak]
          attributes:
            technology: -1
            datawidth: 8


sparse_optimizations:
  version: 0.4
  targets:
    - name: Buffer            # component name in architecture
      representation_format:  # key word for "format" optimization
                              # causes the empty element accesses to be eliminated
        data_spaces:
          - name: A           # tensor name
            ranks:            # points to a list of ranks in fibertree representation
              - format: CP    # coordinate payload representation format
                              # options: CP, UB, RLE, UOP (i.e., CSR upper rank)
      action_optimization:    # keyword for *explicit* storage level optimization
        - type: skipping      # optimization type: either "gating" or "skipping"
          target: B           # the tensor to perform optimization on
          condition_on: [ A ] # the tensor that the optimization is based on
        - type: skipping
          target: Z
          condition_on: [ A ]