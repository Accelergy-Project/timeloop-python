"""
This is a demo file showing how to run and access the results of timeloop-python.
"""

# Imports QoL libraries.
import typing
from pathlib import Path

# Imports the Engine to generate a Topology.
from bindings.model import Engine, Topology

# Imports BufferLevels for type hinting.
from bindings.buffer import BufferLevel

# Import utility functions to run the engine given a config directory.
from tests.util import run_evaluation

# Directory and path of all the config files.
config_dir: Path = Path("01-model-conv1d-2level")
paths: list[str] = [
    "arch/*.yaml",
    "map/conv1d-2level-os.map.yaml",
    "prob/*.yaml",
]

# Engine that is used to generate the Topology.
engine: Engine = run_evaluation(config_dir, paths)
# Topology containing the BufferLevels generated by Engine.
topology: Topology = engine.get_topology()
# BufferLevels constructed by Topology.
buffer_levels: list[BufferLevel] = topology.buffer_levels

# Goes through all the levels and prints out their stats using Python accessions.
level: BufferLevel
for level in buffer_levels:
    # Gets the stats of the level.
    stats: BufferLevel.Stats = level.stats
    # Collects all instance variable names of stats.
    var_names: list[str] = {
        var_name for var_name in dir(stats) if not callable(getattr(stats, var_name))
    } - {"__doc__", "__module__"}

    # Prints out every variable and its value.
    key: str
    for key in var_names:
        # Pulls the attribute from stats.
        attr: typing.Any = getattr(stats, key)
        print(f"{key}: {attr}")
